The ``MyList`` module
========================

Using the ``BaseGeometry`` class
------------------------

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> print(isinstance(bg, BaseGeometry))
True

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator(“age”, (4,))
Traceback (most recent call last):
SyntaxError: invalid character in identifier

>>> bg.integer_validator("name", [3])
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("name", {3, 4})
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("name", None)
Traceback (most recent call last):
TypeError: name must be an integer

>>> integer_validator(“age”, True)
Traceback (most recent call last):
SyntaxError: invalid character in identifier

>>> try:
...   bg.area()
>>> except Exception as e:
...   print(e)
area() is not implemented
